--- 
GENERATOR: 
  PackageName: pocketsphinx
  PackageDescription: "Package pocketsphinx provides Go bindings for libpocketsphinx, a lightweight speech recognition engine."
  PackageLicense: "THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS."
  PkgConfigOpts: [pocketsphinx]
  Includes: ["pocketsphinx.h"]

PARSER: 
  IncludePaths: ["/usr/include", "pocketsphinx/"]
  SourcesPaths: ["pocketsphinx/pocketsphinx.h"]
  Defines:
    # NOT_IMPLEMENTED_YET: 1

TRANSLATOR: 
  ConstRules: 
    defines: eval
  MemTips:
      - {target: "_get_feat$", self: raw}
      - {target: "feat_t$", self: raw}
      - {target: "^FILE$", self: raw}
  PtrTips:
    function:
      - {target: "_args$", self: arr}
      - {target: "_lookup_word$", self: arr, tips: [ref,0]}
      - {target: "_get_prob$", tips: [ref]}
      - {target: "_get_rawdata$", tips: [ref,arr,ref]}
      - {target: "_process_raw$", tips: [ref]}
      - {target: "_process_cep$", tips: [ref]}
      - {target: "_ln_parse$", tips: [ref,0,arr,0]}
      - {target: "_ln_appl_enter$", tips: [ref,arr,0,ref]}
      - {target: "_ln_parse_r$", tips: [ref,arr,0,arr,0]}
      - {target: "_ln_parse_file_r$", tips: [ref,arr,0,0]}
      - {target: "_ln_str_list_r$", self: arr, tips: [ref]}
      - {target: "_process_frame$", tips: [ref,arr,0,ref]}
      - {target: "_latlink_nodes$", tips: [ref,sref]}
      - {target: "_latnode_prob$", tips: [ref,ref,sref]}
      - {target: "_model_set_interp$", tips: [ref,arr]}
      - {target: "_model_set_map_words$", tips: [ref,arr]}
      - {target: "_model_set_iter_model$", tips: [ref,arr]}
      - {target: "_model_add_class$", tips: [ref,0,0,arr,arr,0]}
      - {target: "_model_set_init$", tips: [ref,ref,arr,arr,0]}
      - {target: "_ng_iter$", tips: [ref,0,arr,0]}
      - {target: "_tg_score$", tips: [ref,0,0,0,ref]}
      - {target: "_bg_score$", tips: [ref,0,0,ref]}
      - {target: "_ng_score$", tips: [ref,0,arr,0,ref]}
      - {target: "_get_counts$", self: arr, tips: [ref]}
      - {target: "ngram_prob$", tips: [ref,arr,0]}
      - {target: "_ng_prob$", tips: [ref,0,arr,0,ref]}
      - {target: "^ps_", tips: [ref,ref,ref,ref]}
      - {target: "^cmd_", tips: [ref,ref,ref,ref]}
      - {target: "^ngram_", tips: [ref,ref,ref,ref]}
      - {target: "^fsg_", tips: [ref,ref,ref,ref]}
      - {target: "^logmath_", tips: [ref,ref,ref,ref]}
  Rules: 
    global: 
      - {transform: lower}
      - {action: accept, from: "^ps_"}
      - {action: replace, from: "^ps_", to: _}
      - {action: accept, from: "^cmd_ln_"}
      - {action: replace, from: "^cmd_ln_", to: command_ln_}
      - {action: accept, from: "^arg_"}
      - {action: accept, from: "^logmath"}
      - {action: accept, from: "^ngram_"}
      - {action: accept, from: "^fsg_"}
      - {action: accept, from: "^anytype_"}
      - {transform: export}
    function:
      - {action: ignore, from: "cmd_ln_init$"} # variadic
      - {action: ignore, from: "ngram_iter$"} # variadic
      - {action: ignore, from: "ngram_score$"} # variadic
      - {action: ignore, from: "ngram_probv$"} # variadic

      - {action: ignore, from: "_search_iter_val$"} # bugged in master
      - {action: replace, from: "^_args$", to: "_args0"} # returns array, helper needed
      
      # these symbols are missing when linking, I don't know why
      - {action: ignore, from: "ngram_iter_free$"}
      - {action: ignore, from: "ngram_iter_get$"}
      - {action: ignore, from: "ngram_iter_next$"}
      - {action: ignore, from: "ngram_iter_successors$"}
      - {action: ignore, from: "ngram_model_mgrams$"}
      - {action: ignore, from: "ngram_ng_iter$"}

      - {action: ignore, from: "_model_null_trans_closure$"}
      - {action: ignore, from: "_mfcc_to_float$"}
      - {action: ignore, from: "_float_to_mfcc$"}
      - {action: ignore, from: "_model_trans$"}

      - {action: replace, from: "_search_iter$", to: "_get_search_iter"}
      - {action: replace, from: "_set_iter$", to: "_get_set_iter"}
      - {action: replace, from: "_nbest$", to: "_get_nbest"}
      - {action: replace, from: "_latnode_iter$", to: "_get_latnode_iter"}
    const:
      - {action: accept, from: "^NGRAM_"}
      - {action: accept, from: "^ARG_"}
      - {action: accept, from: "^FE_"}
    type: 
      - {action: accept, from: "^fe_"}
      - {action: accept, from: "^feat_"}
      - {action: accept, from: "^FILE$"}
      - {action: replace, from: "_s$", to: "_t"}
      - {action: replace, from: "_t$"}
    private:
      - {transform: unexport}
    post-global: 
      - {action: replace, from: _$}
      - {load: snakecase}
