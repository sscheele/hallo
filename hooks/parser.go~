package hooks

import (
	"strings"

	"github.com/sscheele/hallo/cal"
	"github.com/sscheele/hallo/weather"
)

//all hooks should be formatted like this (only OR is supported):
//condition_1|condition_2:action:modifier

//WeatherHook changes the behavior of the alarm based on the weather
type WeatherHook struct {
	//Verify may analyze any field of a DataPoint, and returns a bool based on that analysis
	Verify func([]func(weather.DataPoint) bool) bool
	//Action is performed if Verify returns true
	Action string
}

//CalendarHook changes the behavior of the alarm based on the calendar
type CalendarHook struct {
	//Verify may analyze a calendar event's time and summary, and returns a bool based on that analysis
	Verify func([]func(cal.Event) bool) bool
	//Action is performed if Verify returns true
	Action string
}

//ScriptHook changes the behavior of the alarm based on the output of a script
type ScriptHook struct {
	//Verify accepts the command to run and returns a bool based on its output
	Verify func([]func(string) bool) bool
	//Action is performed if Verify returns true
	Action string
}

var (
	//WeatherHooks is the list of every weather hook
	WeatherHooks []WeatherHook
	//CalendarHooks is the list of every calendar hook
	CalendarHooks []CalendarHook
	//ScriptHooks is the list of every script hook
	ScriptHooks []ScriptHook
)

//ParseWeatherHook parses a string to add a hook to WeatherHooks
func ParseWeatherHook(s string) {
	//Acceptable values for weather hooks: Temperature[<>]%d, rain, snow, sleet, wind, fog, PrecipProbability[<>]%d
	var hooks []func(weather.DataPoint) bool
	cam := strings.Split(s, ":")
	//len(cam) may be as little as two items long because some responses won't require modifiers
	if len(cam) < 2 {
		return
	}
	conditions := strings.Split(cam[0], "|")
	for _, cond := range conditions {

	}
}
